import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.datasets import cifar10
import numpy as np
import matplotlib.pyplot as plt
(x_train, _), (x_test, _) = cifar10.load_data()
x_train = x_train.astype('float32') / 255.0
x_test = x_test.astype('float32') / 255.0

x_train_gray = tf.image.rgb_to_grayscale(x_train)
x_test_gray = tf.image.rgb_to_grayscale(x_test)

def build_colorization_model():
    input_img = layers.Input(shape=(32, 32, 1))  # Grayscale input

    x = layers.Conv2D(64, (3, 3), activation='relu', padding='same')(input_img)
    x = layers.MaxPooling2D((2, 2), padding='same')(x)
    x = layers.Conv2D(128, (3, 3), activation='relu', padding='same')(x)
    x = layers.MaxPooling2D((2, 2), padding='same')(x)

    x = layers.Conv2D(128, (3, 3), activation='relu', padding='same')(x)
    x = layers.UpSampling2D((2, 2))(x)
    x = layers.Conv2D(64, (3, 3), activation='relu', padding='same')(x)
    x = layers.UpSampling2D((2, 2))(x)
    
    output_img = layers.Conv2D(3, (3, 3), activation='sigmoid', padding='same')(x)

    model = models.Model(input_img, output_img)
    return model

model = build_colorization_model()
model.compile(optimizer='adam', loss='mse')

model.fit(x_train_gray, x_train, epochs=10, batch_size=128, validation_split=0.1)

loss = model.evaluate(x_test_gray, x_test)
print(f"Test MSE: {loss:.4f}")

predicted_color = model.predict(x_test_gray)

import matplotlib.pyplot as plt

index = 0

gray_img = x_test_gray.numpy()[index].reshape(32, 32)
predicted_img = predicted_color[index]
original_img = x_test[index]

plt.figure(figsize=(9, 3))

plt.subplot(1, 3, 1)
plt.imshow(gray_img, cmap='gray')
plt.title("Grayscale")
plt.axis("off")

plt.subplot(1, 3, 2)
plt.imshow(predicted_img)
plt.title("Colorized")
plt.axis("off")

plt.subplot(1, 3, 3)
plt.imshow(original_img)
plt.title("Original")
plt.axis("off")

plt.tight_layout()
plt.show()
